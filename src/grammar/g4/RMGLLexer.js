// Generated from ./src/grammar/g4/RMGLLexer.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,23,153,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,
2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,
19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,
21,1,22,1,22,0,0,23,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,
24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,23,
2,0,1,4,2,0,65,90,97,122,5,0,48,57,65,90,95,95,97,122,19968,40869,2,0,10,
10,13,13,2,0,9,9,32,32,151,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,
0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,
1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,
0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,
0,0,0,1,44,1,0,0,0,1,46,1,0,0,0,2,48,1,0,0,0,4,53,1,0,0,0,6,60,1,0,0,0,8,
62,1,0,0,0,10,64,1,0,0,0,12,66,1,0,0,0,14,68,1,0,0,0,16,74,1,0,0,0,18,80,
1,0,0,0,20,85,1,0,0,0,22,91,1,0,0,0,24,103,1,0,0,0,26,115,1,0,0,0,28,127,
1,0,0,0,30,129,1,0,0,0,32,131,1,0,0,0,34,135,1,0,0,0,36,137,1,0,0,0,38,139,
1,0,0,0,40,141,1,0,0,0,42,145,1,0,0,0,44,147,1,0,0,0,46,151,1,0,0,0,48,49,
5,82,0,0,49,50,5,101,0,0,50,51,5,99,0,0,51,52,5,116,0,0,52,3,1,0,0,0,53,
54,5,67,0,0,54,55,5,105,0,0,55,56,5,114,0,0,56,57,5,99,0,0,57,58,5,108,0,
0,58,59,5,101,0,0,59,5,1,0,0,0,60,61,5,120,0,0,61,7,1,0,0,0,62,63,5,121,
0,0,63,9,1,0,0,0,64,65,5,119,0,0,65,11,1,0,0,0,66,67,5,104,0,0,67,13,1,0,
0,0,68,69,5,97,0,0,69,70,5,110,0,0,70,71,5,103,0,0,71,72,5,108,0,0,72,73,
5,101,0,0,73,15,1,0,0,0,74,75,5,99,0,0,75,76,5,111,0,0,76,77,5,108,0,0,77,
78,5,111,0,0,78,79,5,114,0,0,79,17,1,0,0,0,80,81,5,116,0,0,81,82,5,101,0,
0,82,83,5,120,0,0,83,84,5,116,0,0,84,19,1,0,0,0,85,86,5,97,0,0,86,87,5,108,
0,0,87,88,5,112,0,0,88,89,5,104,0,0,89,90,5,97,0,0,90,21,1,0,0,0,91,92,5,
98,0,0,92,93,5,111,0,0,93,94,5,114,0,0,94,95,5,100,0,0,95,96,5,101,0,0,96,
97,5,114,0,0,97,98,5,87,0,0,98,99,5,105,0,0,99,100,5,100,0,0,100,101,5,116,
0,0,101,102,5,104,0,0,102,23,1,0,0,0,103,104,5,98,0,0,104,105,5,111,0,0,
105,106,5,114,0,0,106,107,5,100,0,0,107,108,5,101,0,0,108,109,5,114,0,0,
109,110,5,67,0,0,110,111,5,111,0,0,111,112,5,108,0,0,112,113,5,111,0,0,113,
114,5,114,0,0,114,25,1,0,0,0,115,116,5,66,0,0,116,117,5,111,0,0,117,118,
5,114,0,0,118,119,5,100,0,0,119,120,5,101,0,0,120,121,5,114,0,0,121,122,
5,65,0,0,122,123,5,108,0,0,123,124,5,112,0,0,124,125,5,104,0,0,125,126,5,
97,0,0,126,27,1,0,0,0,127,128,5,44,0,0,128,29,1,0,0,0,129,130,5,59,0,0,130,
31,1,0,0,0,131,132,5,34,0,0,132,133,1,0,0,0,133,134,6,15,0,0,134,33,1,0,
0,0,135,136,7,0,0,0,136,35,1,0,0,0,137,138,7,1,0,0,138,37,1,0,0,0,139,140,
7,2,0,0,140,39,1,0,0,0,141,142,7,3,0,0,142,143,1,0,0,0,143,144,6,19,1,0,
144,41,1,0,0,0,145,146,5,46,0,0,146,43,1,0,0,0,147,148,5,34,0,0,148,149,
1,0,0,0,149,150,6,21,2,0,150,45,1,0,0,0,151,152,5,46,0,0,152,47,1,0,0,0,
2,0,1,3,5,1,0,6,0,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class RMGLLexer extends antlr4.Lexer {

    static grammarFileName = "RMGLLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "ANNOTATION_MODE" ];
	static literalNames = [ null, "'Rect'", "'Circle'", "'x'", "'y'", "'w'", 
                         "'h'", "'angle'", "'color'", "'text'", "'alpha'", 
                         "'borderWidth'", "'borderColor'", "'BorderAlpha'", 
                         "','", "';'" ];
	static symbolicNames = [ null, "Rect", "Circle", "X", "Y", "W", "H", "Angle", 
                          "Color", "Text", "Alpha", "BorderWidth", "BorderColor", 
                          "BorderAlpha", "Comma", "Semicolon", "Quotation", 
                          "Letter", "TokenChar", "NL", "Space", "Char", 
                          "AnnotationQuotation", "AnnotationChar" ];
	static ruleNames = [ "Rect", "Circle", "X", "Y", "W", "H", "Angle", "Color", 
                      "Text", "Alpha", "BorderWidth", "BorderColor", "BorderAlpha", 
                      "Comma", "Semicolon", "Quotation", "Letter", "TokenChar", 
                      "NL", "Space", "Char", "AnnotationQuotation", "AnnotationChar" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

RMGLLexer.EOF = antlr4.Token.EOF;
RMGLLexer.Rect = 1;
RMGLLexer.Circle = 2;
RMGLLexer.X = 3;
RMGLLexer.Y = 4;
RMGLLexer.W = 5;
RMGLLexer.H = 6;
RMGLLexer.Angle = 7;
RMGLLexer.Color = 8;
RMGLLexer.Text = 9;
RMGLLexer.Alpha = 10;
RMGLLexer.BorderWidth = 11;
RMGLLexer.BorderColor = 12;
RMGLLexer.BorderAlpha = 13;
RMGLLexer.Comma = 14;
RMGLLexer.Semicolon = 15;
RMGLLexer.Quotation = 16;
RMGLLexer.Letter = 17;
RMGLLexer.TokenChar = 18;
RMGLLexer.NL = 19;
RMGLLexer.Space = 20;
RMGLLexer.Char = 21;
RMGLLexer.AnnotationQuotation = 22;
RMGLLexer.AnnotationChar = 23;

RMGLLexer.ANNOTATION_MODE = 1;




